{"version":3,"sources":["images/brand.svg","components/Header.js","images/table-gradient.svg","components/Table.js","components/TablesMenu.js","images/tick.svg","components/PlayerListItem.js","hooks/useLongPress.js","components/Setup.js","components/Chart.js","components/Toggle.js","components/Game.js","images/crown.svg","components/Summary.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","props","style","transform","hidden","className","src","brand","alt","url","Table","history","useHistory","useState","tableWidth","setTableWidth","ref","useRef","password","setPassword","handleResize","current","offsetWidth","a","axios","method","data","tableId","result","console","log","status","jwt","gameId","push","pathname","state","tableName","name","useEffect","window","addEventListener","height","type","placeholder","value","onChange","e","target","onClick","imgName","gradient","TablesMenu","tablesData","fetchData","map","table","PlayerListItem","isLongPressed","setIsLongPressed","deleteLongPress","callback","ms","startLongPress","setStartLongPress","timerId","setTimeout","clearTimeout","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","useLongPress","isSelected","setIsSelected","styles","deleteInterfaceStyles","opacity","pointerEvents","visible","selectPlayer","playerId","borderColor","color","backgroundColor","tick","deletePlayer","stopPropagation","Setup","useLocation","playerData","setPlayerData","selectedPlayers","setSelectedPlayers","newPlayerInput","setNewPlayerInput","tempSelectedPlayers","foundInPlayerData","find","player","index","findIndex","splice","length","headers","getPlayerList","useCallback","handleDeletePlayer","event","Chart","datasets","numOfLabels","chartData","forEach","borderJoinStyle","pointRadius","label","safePoints","lineColor","borderWidth","potentialPoints","borderDash","labels","Array","keys","options","animation","duration","scales","y","suggestedMin","suggestedMax","PointerEvent","Toggle","onToggle","on","Game","players","gameData","setGameData","showControls","setShowControls","showChart","setShowChart","goToSummary","socketIOClient","isComplete","notCurrent","handleNextPlayer","code","isSafeBreak","isFoulBreak","isBlackPin","cellSpacing","cellPadding","paddingLeft","textAlign","paddingRight","isCurrent","breaks","score","fontWeight","display","showHideHeader","marginBottom","Summary","location","newGameBody","setNewGameBody","getGameData","populateNewGameRequest","winner","notWinner","playersArr","body","_id","crown","potentialScore","foulBreaks","marginTop","App","setHidden","basename","path","exact","component","render","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05c443d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brand.1bd2b222.svg\";","import React from 'react';\r\nimport brand from '../images/brand.svg';\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <header style={{transform: props.hidden ? 'translateY(-100%)' : 'translateY(0%)'}}>\r\n            <div className=\"container\">\r\n                <img src={ brand } alt=\"Logo\"/>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/table-gradient.dba73456.svg\";","import React, { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport gradient from '../images/table-gradient.svg';\r\n\r\nconst url = 'https://node-bar-billiards-auto.herokuapp.com';\r\n\r\nfunction Table(props) {\r\n    const history = useHistory();\r\n    const [tableWidth, setTableWidth] = useState(0);\r\n    const ref = useRef(null);\r\n\r\n    const [password, setPassword] = useState('');\r\n\r\n    function handleResize() {\r\n        setTableWidth(ref.current.offsetWidth);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleResize(); // on render\r\n    }, []);\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n  \r\n    async function handleConnect() {\r\n        const result = await axios({\r\n            method: 'post',\r\n            url: url + '/api/auth',\r\n            data: {\r\n              tableId: props.tableId,\r\n              password: password,\r\n            }\r\n        });\r\n\r\n        console.log(result);\r\n        if (result.status === 200 && result.data.jwt && !result.data.gameId) { // If jwt returned with no gameId\r\n            history.push({\r\n                pathname: '/setup', // Go to setup\r\n                state: { jwt: result.data.jwt, tableName: props.name }\r\n            });\r\n        } else if (result.status === 200 && result.data.jwt && result.data.gameId) { // if jwt returned with gameId\r\n            history.push({\r\n                pathname: '/game', // Join game\r\n                state: { jwt: result.data.jwt, gameId: result.data.gameId }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='Table'\r\n            ref={ref}\r\n            style={{\r\n                height: tableWidth / 3\r\n            }}\r\n        >\r\n            <div className='table-text'>\r\n                <div className='table-name'>{props.name}</div>\r\n                <input \r\n                    type='password' \r\n                    className='password' \r\n                    placeholder='Password' \r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='table-connect'\r\n                onClick={handleConnect}\r\n            >Connect &gt;</div>\r\n            <img className='menu-background' src={url + '/api/images/' + props.imgName + '.jpg'} alt='Bar Billiards Table' />\r\n            <img className='gradient' src={ gradient } alt='gradient'/>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Table from './Table';\r\n\r\nconst url = 'https://node-bar-billiards-auto.herokuapp.com';\r\n\r\nfunction TablesMenu() {\r\n\r\n    const [tablesData, setTablesData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(\r\n              url + '/api/tables',\r\n            );\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='container'>\r\n            {tablesData.map(table => (\r\n                <Table \r\n                    name={table.name} \r\n                    key={table.tableId}\r\n                    tableId={table.tableId}\r\n                    imgName={table.imgName}\r\n                />\r\n            ))}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default TablesMenu;","export default __webpack_public_path__ + \"static/media/tick.b047f327.svg\";","import React, { useState } from 'react';\r\nimport useLongPress from '../hooks/useLongPress';\r\n\r\nimport tick from '../images/tick.svg';\r\n\r\nfunction PlayerListItem(props) {\r\n\r\n    const [isLongPressed, setIsLongPressed] = useState(false);\r\n    const deleteLongPress = useLongPress(handleLongPress, 500);\r\n\r\n    function handleLongPress() {\r\n        if (!isLongPressed) setIsLongPressed(!isLongPressed);\r\n    }\r\n\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    function handlePlayerClick() {\r\n        setIsSelected(!isSelected);\r\n        props.selectPlayer(props.playerId);\r\n    }\r\n\r\n    const styles = {\r\n        purpleLight: '#7262F6',\r\n        purple: '#4433D4',\r\n        greyLight: '#707070',\r\n        grey: '#4A4A4A',\r\n    }\r\n\r\n    const deleteInterfaceStyles = {\r\n        hidden: {\r\n            opacity: 0,\r\n            pointerEvents: 'none'\r\n        },\r\n        visible: {\r\n            opacity: 1,\r\n            pointerEvents: 'all'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='player-option' \r\n            key={props.playerId}\r\n            onClick={handlePlayerClick}\r\n            style={isSelected \r\n                ? { borderColor: styles.purpleLight }\r\n                : { borderColor: styles.greyLight }\r\n            }\r\n            {...deleteLongPress}\r\n        >\r\n            <div className='player-name'\r\n                style={isSelected \r\n                    ? { color: styles.purple }\r\n                    : { color: styles.grey }\r\n                }\r\n            >{props.name}</div>\r\n            <div className='selected-indicator'\r\n                style={isSelected \r\n                    ? { borderColor: styles.purpleLight, backgroundColor: styles.purpleLight }\r\n                    : { borderColor: styles.greyLight, backgroundColor: '#fff' }\r\n                }\r\n            >\r\n                <img className='tick' src={tick} alt='tick icon'/>\r\n            </div>\r\n\r\n            <div className='delete-interface'\r\n                style={isLongPressed ? deleteInterfaceStyles.visible : deleteInterfaceStyles.hidden}\r\n            >\r\n                <div className='delete'\r\n                    onClick={(() => { props.deletePlayer(props.playerId) })}\r\n                >Delete</div>\r\n                <div className='cancel'\r\n                    onClick={((e) => { e.stopPropagation(); setIsLongPressed(false) })}\r\n                >Cancel</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerListItem;","import { useState, useEffect } from 'react';\r\n\r\nexport default function useLongPress(callback = () => {}, ms = 300) {\r\n  const [startLongPress, setStartLongPress] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let timerId;\r\n    if (startLongPress) {\r\n      timerId = setTimeout(callback, ms);\r\n    } else {\r\n      clearTimeout(timerId);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerId);\r\n    };\r\n  }, [callback, ms, startLongPress]);\r\n\r\n  return {\r\n    onMouseDown: () => setStartLongPress(true),\r\n    onMouseUp: () => setStartLongPress(false),\r\n    onMouseLeave: () => setStartLongPress(false),\r\n    onTouchStart: () => setStartLongPress(true),\r\n    onTouchEnd: () => setStartLongPress(false),\r\n  };\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport PlayerListItem from './PlayerListItem';\r\n\r\nconst url = 'https://node-bar-billiards-auto.herokuapp.com';\r\n\r\nfunction Setup() {\r\n    const location = useLocation();\r\n    const { jwt, tableName } = location.state;\r\n    const history = useHistory();\r\n\r\n    const [playerData, setPlayerData] = useState([]);\r\n    const [selectedPlayers, setSelectedPlayers] = useState([]);\r\n    const [newPlayerInput, setNewPlayerInput] = useState('');\r\n\r\n    function selectPlayer(playerId) {\r\n        let tempSelectedPlayers = selectedPlayers;\r\n\r\n        const foundInPlayerData = playerData.find(player => player.playerId === playerId);\r\n\r\n        const index = tempSelectedPlayers.findIndex(player => player.playerId === foundInPlayerData.playerId);\r\n\r\n        if (index === -1) {\r\n            tempSelectedPlayers.push({ playerId: foundInPlayerData.playerId });\r\n        } else {\r\n            tempSelectedPlayers.splice(index, 1);\r\n        }\r\n        setSelectedPlayers(tempSelectedPlayers);\r\n    }\r\n\r\n    function handlePlayerInput(event) {\r\n        setNewPlayerInput(event.target.value);\r\n    }\r\n\r\n    async function handleSubmitPlayer() {\r\n        // Verify\r\n        if (newPlayerInput.length < 1) return console.log('Name must to be at least 1 char in length');\r\n        if (newPlayerInput.length > 18) return console.log('Name must be shorter than 18 chars')\r\n\r\n        const result = await axios({\r\n            method: 'POST',\r\n            url: url + '/api/players',\r\n            data: { name: newPlayerInput },\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n\r\n        if (result.status === 200) {\r\n            setNewPlayerInput('');\r\n            return getPlayerList();\r\n        }\r\n    }\r\n\r\n    const getPlayerList = useCallback(async () => {\r\n        const result = await axios({\r\n            method: 'GET',\r\n            url: url + '/api/players',\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n        console.log(result)\r\n        setPlayerData(result.data);\r\n    }, [jwt]);\r\n\r\n    useEffect(() => {\r\n        getPlayerList();\r\n    }, [getPlayerList])\r\n\r\n    async function handleDeletePlayer(playerId) {\r\n        console.log(playerId)\r\n        const result = await axios({\r\n            method: 'DELETE',\r\n            url: url + '/api/players',\r\n            data: { playerId },\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n\r\n        if (result.status === 200) return getPlayerList();\r\n    }\r\n\r\n    async function handleStartGame() {\r\n        // Verify\r\n        if (selectedPlayers.length < 2) return console.log('Need at least 2 players');\r\n        \r\n        try {\r\n            const result = await axios({\r\n                method: 'POST',\r\n                url: url + '/api/games/newgame',\r\n                data: selectedPlayers,\r\n                headers: {\r\n                    'x-auth-token': jwt\r\n                }\r\n            });\r\n\r\n            if (result.status === 200) {\r\n                history.push({\r\n                    pathname: '/game',\r\n                    state: { gameId: result.data, jwt: jwt }\r\n                })\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='Setup container'>\r\n            <div className='table-info'>\r\n                <h1 className='table-name'>{tableName}</h1>\r\n                <div className='table-status'>Online<div className='status-indicator'></div></div>\r\n            </div>\r\n            <div className='setup-form'>\r\n                <h2>Select Players</h2>\r\n                <div className='player-list'>\r\n                    {playerData.map(player => (\r\n                        <PlayerListItem \r\n                            playerId={player.playerId}\r\n                            name={player.name}\r\n                            key={player.playerId}\r\n                            selectPlayer={selectPlayer}\r\n                            deletePlayer={handleDeletePlayer}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                \r\n\r\n                <div className='register-new-player'>\r\n                    <h2>Register New Player</h2>\r\n                    <div className='player-form'>\r\n                        <input placeholder='Name' value={newPlayerInput} onChange={handlePlayerInput}/>\r\n                        <div className='call-to-action' onClick={handleSubmitPlayer}>Submit</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='call-to-action start-game' onClick={handleStartGame}>Start Game</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setup;","import React, { useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nfunction Chart(props) {\r\n\r\n    let datasets = [];\r\n    let numOfLabels = 0;\r\n\r\n    props.chartData.forEach(player => {\r\n        datasets.push({\r\n            borderJoinStyle: 'bevel',\r\n            pointRadius: 0,\r\n            label: player.name,\r\n            data: player.safePoints,\r\n            borderColor: player.lineColor,\r\n            borderWidth: 2\r\n        });\r\n\r\n        if (player.potentialPoints) {\r\n            datasets.push({\r\n                pointRadius: 0,\r\n                borderDash: [5],\r\n                label: player.name + ' Potential',\r\n                data: player.potentialPoints,\r\n                backgroundColor: 'transparent',\r\n                borderColor: player.lineColor,\r\n                borderWidth: 2\r\n            });\r\n        }\r\n\r\n        numOfLabels = player.safePoints.length + 2;\r\n    });\r\n\r\n    \r\n    const ref = useRef();\r\n    const chartData = {\r\n        labels: [...Array(numOfLabels).keys()],\r\n        datasets: datasets,\r\n        options: { \r\n            animation: { duration: 0 }, \r\n            scales: { y: { suggestedMin: 0, suggestedMax: 300 }}\r\n        }\r\n    };\r\n\r\n    const style={\r\n        opacity: props.visible ? 1 : 0,\r\n        PointerEvent: props.visible ? 'all' : 'none'\r\n    }\r\n\r\n    return (\r\n        <div className='Chart' style={style}><Line ref={ref} data={chartData} options={chartData.options} height={120}/></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nfunction Toggle(props) {\r\n    return (\r\n        <div className='toggle'\r\n            onClick={props.onToggle}\r\n        >\r\n            <div className='label'>{props.label}</div>\r\n            <div className='switch' \r\n                style={{\r\n                    backgroundColor: props.on ? '#7262F6' : '#F8F6FF'\r\n                }}\r\n            >\r\n                <div className='pip'\r\n                    style={{\r\n                        transform: props.on ? 'translateX(0px)' : 'translateX(-30px)',\r\n                        backgroundColor: props.on ? '#fff' : '#7262F6'\r\n                    }}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Toggle;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport socketIOClient from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport Chart from './Chart';\r\nimport Toggle from './Toggle';\r\n\r\nconst url = 'https://node-bar-billiards-auto.herokuapp.com';\r\n\r\nfunction Game(props) {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { gameId, jwt } = location.state;\r\n\r\n    const [gameData, setGameData] = useState({ players: [] });\r\n    const [showControls, setShowControls] = useState(true);\r\n    const [showChart, setShowChart] = useState(true);\r\n\r\n    const goToSummary = useCallback(() => {\r\n        history.push({\r\n            pathname: '/summary',\r\n            state: { gameId: gameId, jwt: jwt }\r\n        });\r\n    }, [history, gameId, jwt])\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(url + '?data=' + gameId);\r\n        socket.on('GameData', data => {\r\n            console.log(data);\r\n            if (data.isComplete) return goToSummary();\r\n            setGameData(data);\r\n        });\r\n    }, [goToSummary, setGameData, gameId]);\r\n\r\n    const styles = {\r\n        current: {\r\n            backgroundColor: '#7262F6',\r\n            color: '#fff'\r\n        },\r\n        notCurrent: {}\r\n    }\r\n\r\n    async function handleNextPlayer(code) {\r\n\r\n        // 1: safe\r\n        // 2: foul\r\n        // 3: black\r\n\r\n        const result = await axios({\r\n            method: 'POST',\r\n            url: url + '/api/games/nextplayer',\r\n            data: {\r\n                gameId: gameId,\r\n                isSafeBreak: code === 1 ? true : false,\r\n                isFoulBreak: code === 2 ? true : false,\r\n                isBlackPin: code === 3 ? true : false,\r\n            },\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n        if (result.data.isComplete) return goToSummary();\r\n        setGameData(result.data);\r\n    }\r\n\r\n    function handleControlToggle() {\r\n        props.showHideHeader(showControls);\r\n        setShowControls(!showControls);\r\n    }\r\n\r\n    function handleChartToggle() {\r\n        setShowChart(!showChart);\r\n    }\r\n\r\n    async function handleEndGame() {\r\n        const result = await axios({\r\n            method: 'POST',\r\n            url: url + '/api/games/endgame',\r\n            data: { gameId: gameId },\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n\r\n        console.log(result);\r\n        if (result.status === 200) return goToSummary();\r\n    }\r\n\r\n    return (\r\n        <div className='Game container'>\r\n            <div className='scoreboard'>\r\n                <table cellSpacing='0' cellPadding='0'>\r\n                    <tbody>\r\n                    <tr className='labels'>\r\n                        <th style={{paddingLeft: '12px'}}>Name</th>\r\n                        <th>Break</th>\r\n                        <th style={{ textAlign: 'right', paddingRight: '12px' }}>Score</th>\r\n                    </tr>\r\n                    {gameData.players.map(player => (\r\n                        <tr className='player' \r\n                            key={player.name}\r\n                            style={player.isCurrent ? styles.current : styles.notCurrent}    \r\n                        >\r\n                            <th className='name'>{player.name}</th>\r\n                            <th className='break'>{player.isCurrent ? player.breaks[0].score : ''}</th>\r\n                            <th className='score'>\r\n                                {player.isCurrent\r\n                                    ? <span style={{fontWeight: '700'}}>\r\n                                        {player.score}<span style={{fontWeight: '300', opacity: .7}}> &gt; {player.score + player.breaks[0].score}</span>\r\n                                    </span>\r\n                                    : player.score\r\n                                }\r\n                            </th>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {gameData.chartData ? <Chart visible={showChart} chartData={gameData.chartData} /> : <div></div>}\r\n\r\n            <div className='controls' \r\n                style={{ \r\n                    opacity: showControls ? 1 : 0, \r\n                    pointerEvents: showControls ? 'all' : 'none',\r\n                    transform: showChart ? 'translateY(0px)' : 'translateY(-100px)'\r\n                }}\r\n            >\r\n                <div className='button safe' onClick={(() => handleNextPlayer(1))}>Safe</div>\r\n                <div className='button foul' onClick={(() => handleNextPlayer(2))}>Nope</div>\r\n                <div className='button black' onClick={(() => handleNextPlayer(3))}>Black</div>\r\n            </div>\r\n\r\n            <div style={{display: 'flex'}}>\r\n                <Toggle label={'Controls'} onToggle={handleControlToggle} on={showControls}/>\r\n                <Toggle label={'Chart'} onToggle={handleChartToggle} on={showChart}/>\r\n            </div>\r\n\r\n            <div className='end-game secondary-cta'\r\n                onClick={handleEndGame}\r\n                style={{marginBottom: '10vh'}}\r\n            >End Game</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","export default __webpack_public_path__ + \"static/media/crown.3eeef0a1.svg\";","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Chart from './Chart';\r\n\r\nimport crown from '../images/crown.svg';\r\nconst url = 'https://node-bar-billiards-auto.herokuapp.com';\r\n\r\nfunction Summary() {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const { gameId, jwt } = location.state;\r\n    const [gameData, setGameData] = useState({ players: [] });\r\n    const [newGameBody, setNewGameBody] = useState([]);\r\n\r\n    const getGameData = useCallback(async () => {\r\n        const result = await axios({\r\n            method: 'POST',\r\n            url: url + '/api/games',\r\n            data: { gameId: gameId },\r\n            headers: {\r\n                'x-auth-token': jwt\r\n            }\r\n        });\r\n\r\n        console.log(result.data)\r\n        \r\n        setGameData(result.data);\r\n        populateNewGameRequest(result.data.players);\r\n\r\n    }, [gameId, jwt]);\r\n\r\n    useEffect(() => {\r\n        getGameData();\r\n    }, [getGameData]);\r\n\r\n    const styles = {\r\n        winner: {\r\n            backgroundColor: '#7262F6',\r\n            color: '#fff'\r\n        },\r\n        notWinner: {}\r\n    }\r\n\r\n    function populateNewGameRequest(playersArr) {\r\n        let body = [];\r\n        playersArr.forEach(player => {\r\n            body.push({ playerId: player._id })\r\n        })\r\n\r\n        setNewGameBody(body);\r\n    }\r\n\r\n    async function handleRematch() {\r\n        console.log(newGameBody)\r\n        try {\r\n            const result = await axios({\r\n                method: 'POST',\r\n                url: url + '/api/games/newgame',\r\n                data: newGameBody,\r\n                headers: {\r\n                    'x-auth-token': jwt\r\n                }\r\n            });\r\n\r\n            if (result.status === 200) {\r\n                history.push({\r\n                    pathname: '/game',\r\n                    state: { gameId: result.data, jwt: jwt }\r\n                })\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    function handleFinish() {\r\n        history.push('/');\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='Summary container'>\r\n            <h1>Summary</h1>\r\n            <div className='scoreboard'>\r\n                <table cellSpacing='0' cellPadding='0'>\r\n                    <tbody>\r\n                        <tr className='labels'>\r\n                            <th style={{paddingLeft: '12px'}}>Player</th>\r\n                            <th style={{ textAlign: 'right', paddingRight: '12px' }}>Score</th>\r\n                        </tr>\r\n                        {gameData.players.map((player, index) => (\r\n                            <tr className='player'\r\n                                key={player._id}\r\n                                style={index === 0 ? styles.winner : styles.notWinner}\r\n                            >\r\n                                <th className='name'\r\n                                    style={{fontWeight: index === 0 ? '400' : '300'}}\r\n                                >{player.name} {index === 0 ? <img src={crown} alt='crown icon'/> : ''}\r\n                                </th>\r\n                                <th className='score'>{player.score}</th>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>    \r\n                </table>    \r\n            </div> \r\n\r\n            <h2>Breakdown</h2>\r\n            <div style={{marginBottom: 50}}>\r\n                {gameData.players.map((player, index) => (\r\n                    <div className='breakdown-card'\r\n                        key={'breakdown-' + player._id}\r\n                        style={index === 0 ? styles.winner : styles.notWinner}\r\n                    >\r\n                        <div className='name'\r\n                            style={{fontWeight: index === 0 ? '400' : '300'}}\r\n                        >\r\n                            {player.name} {index === 0 ? <img src={crown} alt='crown icon'/> : ''}\r\n                        </div>\r\n\r\n                        <div className='stat'>Score: <span className='number'>{player.score}</span></div>\r\n                        <div className='stat'>Potential Score: <span className='number'>{player.potentialScore}</span></div>\r\n                        <div className='stat'>Foul Breaks: <span className='number'>{player.foulBreaks}</span></div>\r\n                        <div className='stat'>Points Lost: <span className='number'>{player.potentialScore - player.score}</span></div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {gameData.chartData ? <Chart visible={true} chartData={gameData.chartData} /> : <div></div>}\r\n\r\n            <div style={{marginBottom: 20, marginTop: 60}} className='call-to-action' onClick={handleRematch}>Rematch</div>\r\n            <div style={{marginBottom: 80}} className='secondary-cta' onClick={handleFinish}>Finish</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Summary;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './styles/App.scss';\n\nimport Header from './components/Header';\nimport TablesMenu from './components/TablesMenu';\nimport Setup from './components/Setup';\nimport Game from './components/Game';\nimport Summary from './components/Summary';\n\nfunction App() {\n\n  const [hidden, setHidden] = useState(false);\n\n  function showHideHeader(value) {\n    console.log(value);\n    setHidden(value);\n  }\n\n  return (\n    <Router basename='/scorebilliards-auto'>\n      <div className=\"App\">\n        <Header hidden={hidden}/>\n        <Switch>\n          <Route path='/' exact component={TablesMenu}/>\n          <Route path='/setup' component={Setup}/>\n          <Route \n            path='/game' \n            render={(props) => (\n              <Game {...props} showHideHeader={showHideHeader}/>\n            )}\n          />\n          <Route path='/summary' component={Summary}/>\n        </Switch>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}